  자바스크립트에서 제공하는 변수형에는 6가지가있다.{
  기본형 5가지:
  참 거짓을 구별하는 boolean;
  의도적으로 빈 값을 넣고 싶을때는 null;
  아예 값이 지정되지 않았다면 undefined;
  숫자라면 number;
  문자열이라면 string;
  참조형 1가지
  여러개의 변수를 묶어서 관리한다면 object;
}

  산술 연산은 괄호를 써서 연산하는 편이 좋다.
  앞에 문자열과 연산될 경우 숫자가 문자열로 변환되어 엉뚱한 값으로 연산될 수 있기 때문이다.
  
  for, while의 의미적 차이
  for는 반복해야 할 횟수가 정해져 있을때 쓴다.
  while 은 반복해야할 횟수가 명확하지 않을 때 쓴다. + 어떤 특정한 상황이 아닌 경우에만 실행하고 싶을때 쓴다.
  while의 경우를 예로 들면 게임오버가 되지 않은 상태는 횟수가 정해져 있지 않으므로 조건을 만족할때까지 반복되도록 반복문을 짜야한다.
  
  자바스크립트는 숫자와 문자열을 비교할 때, 문자열을 숫자로 먼저 변환한다 
  1=='1' true.
  but 1==='1' false. => 값의 형태까지 비교하기 때문에 false.
  
  유효성 검사를 꼭 하자! 잘 만든 프로그램이라도 입력이 쓰레기라면 출력값도 쓰레기가 나올 수밖에 없다.
  
  대문자와 '_'만으로 이루어진 변수는 관습적으로 상수로 생각되는 것 같다. 
  
  else 에는 조건을 넣지 않음-주의할것!
  
  switch(변수1){
  case 1 :
  asdf
  break;
  };
  
  switch 문엥서 하나의 조건이 맞으면 그 이후의 코드 모두 실행 
  = break 문으로 탈출해야 조건에 맞는 소스만 실행 가능.
  
  함수.
  
  함수의 필수요소: 이름, 인자, 리턴값 = 인터페이스 라고 한다.
  
  함수 호출시 () 괄호를 꼭 붙이자.
  
  함수, 함수()의 차이는 전자는 함수자체를 나타내는것, 후자는 아무인자없이 함수를 호출했을 때 리턴되는 결과 값을 나타냄.
  
  refactoring:외부 동작을 바꾸지 않으면서 내부의 구현을 개선하는 작업. 
  ex) 빠르게 만들기 위한 코드 최적화, 잘못된 의미의 변수명 수정 등의 점진적 개선 방법.
  중요한 것은 외부의 동작을 바꾸지 않아야 한다는 것과 점진적으로 개선해 나가야한다는 것.
  
  style css요소 연결시 <link rel = "stylesheet" href = "css경로" />
  
  sort() 모든 요소를 문자열로 변환뒤에 유니코드로 코드를 비교한다. 
  -때문에 10과 2의 비교시 첫째자리인 1과 2가 비교되어 2가 더 높은 순위로 비교된다.
  따라서 이런경우 비교함수를 인자에 넣어야 제대로된 비교를 할 수 있다.
  ex) function(){
  return a-b;
  }
  -값이 나오면 작다는의미, +값이 나오면 크다는 의미로 sort가 인자로 받아들이게 된다. 
  
  와이어 프레임: 레이아웃과 UI요소의 뼈대를 제공하는 그림 ex>pencil
  
  getElementById : DOM 엘리먼트 탐색함수 중 가장 빠른 함수이다. 자주 사용하도록 하자.
  
  삼항 연산자: if 문의 간략한 버전
  조건 ? 참 : 거짓; 의 형식으로 이루어 진다. 
  
  scope 범위.
  지역변수와 전역변수에 관해 알아보았다. 
  전역변수는 부모로 연결시 자식태그에서 참조가 가능하다.
  하지만 지역변수의 경우 함수내에서만 참조가 가능하고 외부에서는 참조가 불가능하다. 
  
  refactoring에 대해.
  중복되는 소스가 많을 경우 함수로 만들어 정리해 두면, 나중에 수정을 해야 하는 상황에서 함수만 수정할 수 있어 효율성이 늘어난다. 
  또한 코드가 줄어서 좀더 간략하고 직관적으로 보일 수 있다. 
  
  호이스팅이란? 
  수 안에 있는 선언들을 모두 끌어올려서 해당 함수 유효 범위의 최상단에 선언하는 것을 말한다.
  자바스크립트 함수는 실행되기 전에 함수 안에 필요한 변수값들을 모두 모아서 유효 범위의 최상단에 선언한다.
  자바스크립트 Parser가 함수 실행 전 해당 함수를 한 번 훑는다.
  함수 안에 존재하는 변수/함수선언에 대한 정보를 기억하고 있다가 실행시킨다.
  유효 범위: 함수 블록 {} 안에서 유효
  즉, 함수 내에서 아래쪽에 존재하는 내용 중 필요한 값들을 끌어올리는 것이다.
  실제로 코드가 끌어올려지는 건 아니며, 자바스크립트 Parser 내부적으로 끌어올려서 처리하는 것이다.
  실제 메모리에서는 변화가 없다.
  var 변수 선언과 함수선언문에서만 호이스팅이 일어난다.
  var 변수/함수의 선언만 위로 끌어 올려지며, 할당은 끌어 올려지지 않는다.
  let/const 변수 선언과 함수표현식에서는 호이스팅이 발생하지 않는다.
  
  개발자 도구의 디버깅
  개발자 도구의 소스 부분을 보면 js파일 소스를 볼수 있다. 
  브레이크포인트를 설정하여 원하는 소스에서 js의 실행이 중지되도록 할수있다. 
  실행이 중지되면 변수를 변경하거나 조회할수 있다. 
  소스코드를 함부로 건드릴 수 없을 때, 디버거를 이용해서 프로그램의 흐름을 알아보자.
  
  변수의 객체화.
  메인 주제로 묶여 있는 변수들을 하나의 객체로 바꿔 선언할 수있다.
  ex) let comScore=0,comPercent2=0.5,comPercent3=0.33; => let computer ={ score: 0, percent2: 0.5, percent3:0.33};
  변수를 묶어 객체로 만들면 연관된 변수를 직관적으로 볼수 있어 참조하기 편하다.
  
  alert, prompt, document 등은 window 객체에 속해있는 객체이다. 
  window 오브젝트는 브라우저에 기본 내장된 오브젝트로서 자바스크립트가 아닌 네이티브로 구현되어 있다. 
  
  jQuery 버전
  uncompressed: 압축되지 않은 형태. 코드를 쉽게 이해할 수 있고 브레이크포인트를 걸기 쉬워 개발 할 때 주로 쓰인다.
  minified: 압축된 형태. 전체 코드가 최소한의 글자로 구성되어 네트워크 다운로드 속도가 빨라진다. 실제 배포용으로 주로 쓰임.
  slim: Ajax, Effects 등의 기능을 제외한 가벼운 버전
  slim minified: 슬림버전의 압축된 형태.
  
  jQuery는 'jQuery'라는 전역변수를 선언해 주는데 모든 명령어가 이 함수를 호출하는 것에서 시작되는 경우가 많다. 
  $라고 줄여 표기한다. 
  
  jquery를 이용하면 크로스브라우징 이슈에서 상당부분 벗어날수있다.
  +플러그인 시스템을 제공  
  
  실수했던 것.
  textElem.innerHTML = s;
  => $textElem.html(s);
  jquery로 바꿀때 '='을 쓰지 않고 ()를 쓴다.
  
  동기함수와 비동기 함수.
  일처리가 끝날 때까지 제어권을 돌려주지 않는 함수는 동기함수.
  제어권을 먼저 돌려주고 일처리를 수행하는 함수는 비동기함수.
  
  
  콜백 함수.
  비동기함수가 실행이 끝나면 다음 함수를 인자로 전달, 실행하는 함수.
  ex) 변수.함수(x ms, fuction(){ blablabla});
  
  jquery 편의함수
  $(function() 의 형태로 넣어주면 jquery는 그 함수를 DOMContentLoaded 이벤트가 발생했을 때 실행시켜줌.
  
  DOMContentLoaded vs load 이벤트
  
  전자는 태그가 생성되면 이벤트 실행, 후자는 태그에 선언된 모든 요소의 로드가 끝나야 실행.
  전자는 속도가 빠르고 후자는 느리지만 정확함.
  
